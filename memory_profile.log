Filename: .\main.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     32.7 MiB     32.7 MiB           1   @profile(stream=open('memory_profile.log', 'w+'))
    34                                         def inicio(laberinto, cola, agente):
    35                                             #agente aqui es semilla!!!!
    36                                             #lista para guardar los estados que ya generaron hijos y evitar ciclos
    37     32.7 MiB      0.0 MiB           1       trabajados = [] 
    38     32.7 MiB      0.0 MiB           1       total_nodos = 1
    39                                             # genero los primeros estados a partir del nodo inicial
    40     32.7 MiB      0.0 MiB           1       respuesta = algoritmo.generar_estados_posibles(laberinto, agente)
    41     32.7 MiB      0.0 MiB           1       if isinstance(respuesta, list): 
    42     32.7 MiB      0.0 MiB           1           total_nodos += len(respuesta)
    43                                         
    44                                             # aqui llamo a agregar_cola()
    45                                             # cola aqui se pasa como referencia de la original
    46     32.7 MiB      0.0 MiB           1       algoritmo.control_flujo(respuesta, cola, trabajados) 
    47                                         
    48     32.7 MiB      0.0 MiB           1       total_tiempo = 0
    49     32.8 MiB      0.0 MiB         229       while not cola.empty():
    50     32.8 MiB      0.0 MiB         229           inicio = time.time()
    51                                         
    52                                                 # obtiene el agente y lo elimina de la cola FIFO!!!
    53     32.8 MiB      0.0 MiB         229           agente = cola.get() 
    54                                         
    55                                                 # registro el agente en la lista de trabajados para no volver 
    56                                                 # a tomarlos en cuenta
    57     32.8 MiB      0.0 MiB         229           trabajados.append(copy.copy(agente))
    58                                         
    59                                                 # genero los estados posibles del agente
    60     32.8 MiB      0.1 MiB         229           respuesta = algoritmo.generar_estados_posibles(laberinto, agente)
    61                                                 #compruebo q sea una lista para poder contar los nodos
    62     32.8 MiB      0.0 MiB         229           if isinstance(respuesta, list): 
    63     32.8 MiB      0.0 MiB         228               total_nodos += len(respuesta)
    64                                         
    65                                         
    66                                                 # controlo las acciones posteriores, agrego ? termino ? hay solucion ?
    67     32.8 MiB      0.0 MiB         229           if algoritmo.control_flujo(respuesta, cola, trabajados):
    68     32.8 MiB      0.0 MiB           1               break
    69                                                 
    70     32.8 MiB      0.0 MiB         228           fin = time.time()
    71     32.8 MiB      0.0 MiB         228           sub_total_tiempo = fin - inicio # tiempo de cada nodo
    72     32.8 MiB      0.0 MiB         228           total_tiempo += sub_total_tiempo
    73     32.8 MiB      0.0 MiB         228           print(f'tiempo por una ejecucion completa del agente: {sub_total_tiempo} segundos \n')
    74                                         
    75     32.8 MiB      0.0 MiB           1       print(f'tiempo total de la ejecucion: {total_tiempo} segundos')
    76     32.8 MiB      0.0 MiB           1       print(f'nodos generados: {total_nodos}')


